import Head from "next/head";
import { useEffect, useState, useRef } from 'react';
import Pusher from 'pusher-js';
import { Message } from '../components/Message';
import { MessageInput } from '../components/MessageInput';
import { UserNameInput } from '../components/UserNameInput';
import type { ChatMessage } from '../types/chat';
import { Button, Input, Loader } from '@mantine/core';
import { PlusCircle } from "lucide-react"


export default function Home() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [selectedChannel, setSelectedChannel] = useState< string | null>(null);
  const [username, setUsername] = useState<string | null>(null);
  const [channels, setChannels] = useState<string[]>([]);
  const [newChName, setNewChName] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const messagesEndRef = useRef<HTMLDivElement>(null)
  
  const pusher = useRef<Pusher | null>(null);
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }
  
  
  useEffect(() => {
    let mounted = true;
    const pusherKey = process.env.NEXT_PUBLIC_PUSHER_KEY;
    // const pusherCluster = process.env.NEXT_PUBLIC_PUSHER_CLUSTER;
    if (mounted) {
      const _pusher = new Pusher(pusherKey as string, {
        wsHost: 'soketi.ozhome.site',
        wsPort: 6001,
        enabledTransports: ['ws', 'wss'],
        forceTLS: false, // Add this if not using SSL
        cluster: 'mt1', // Add default cluster
        disableStats: true, // Disable Pusher stats
      });
      pusher.current = _pusher;
      
    }
    return () => {
      mounted = false;
    }
  }, []);


  

  useEffect(() => {
    scrollToBottom()
    
  }, [messages,  username])

  const getChannels = async () => {
    const channelList = pusher.current?.subscribe('chat');
    channelList?.bind('channels', (data: string) => {
      setChannels((prev) => [...prev, data]);
    }) 
    const response = await fetch('/api/getChannelList');
    const data = await response.json();
    setChannels(data);
    return data;
  }

  useEffect(() => {
    getChannels();
  }, []);

  useEffect(() => {
    const username = localStorage.getItem('registeredAs');
    const selectedCh = localStorage.getItem('registeredChannel');
    if (username) {
      setUsername(username);
      setSelectedChannel(selectedCh);
    }
    
    if(selectedCh === undefined || selectedCh === null) return
    fetchMessages(selectedCh);
    
    return () => {
      pusher?.current?.unsubscribe('chat');
      pusher?.current?.disconnect();
    };
  }, []);
  
  const fetchMessages = async (selectedChannel: string) => {
    const channel = pusher.current?.subscribe('chat');
    channel?.bind(selectedChannel, (data: ChatMessage) => {
      setMessages((prev) => [...prev, data]);
    }) 

    const response = await fetch(`/api/messages?channelName=${selectedChannel}`);
    const data = await response.json();
    // Messages from API are already sorted newest first
    setMessages(data);
  };


  const selectChannelHandler = (channelName: string) => {
    setSelectedChannel(channelName);
    localStorage.setItem('registeredChannel', channelName);
    fetchMessages(channelName);
  }

  const channelCreateHandler = async () => {
    setLoading(true);
    if (!newChName) {
      alert('Please enter channel name');
      return;
    }

    try {
      await fetch('/api/createChannel', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          channelName: newChName,
        }),
      });
      setNewChName('');
    } catch (error) {
      console.error('Error sending message:', error);
    } finally {
      setLoading(false);
    }
  };


  
  
  return (
    <>
      <Head>
        <title>Chat App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>
        {selectedChannel ? selectedChannel.split('-dbId-')?.[0] : 'ChannelList'}
      </h1>
      <div style={{ paddingTop: '50px' }}>
        <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '8px' }}>
          {selectedChannel ? <>
            <Button variant="filled" color="grape" onClick={() => setSelectedChannel(null)} >BACK</Button>
          </> : <div style={{ display: 'flex', justifyContent: 'center', gap: '10px' }}>
              <Input onChange={(e)=>setNewChName(e?.target?.value)} placeholder="Channel name"/>
              <Button variant="filled" color="grape"
                leftSection={
                  <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '8px' }}>
                    {loading ? <><Loader size="1rem" color="white" /> Loading...</> : <><PlusCircle /> Create New</>}
                  </div>
                }
                onClick={() => channelCreateHandler()} />
          </div>}
        </div>
        <div className="chat-container" >
          {
            !username ? (
              <UserNameInput setUserInfo={(val: string) => setUsername(val)} user={username} />
            ) : (
                !selectedChannel ? (
                  <> {channels.map((channelName, idx) => (
                    <div
                      key={`chnames_${idx}`}
                      onClick={() => selectChannelHandler(channelName)}
                      style={{ color: '#FFF', textAlign: 'center', padding: '8px', margin: '8px', border: 'solid 1px #fff', backgroundColor: '#1c1c1c', borderRadius:'8px',cursor:'pointer' }}>
                      <h2>{channelName.split('-dbId-')?.[0]}</h2>
                    </div>
                  ))}
                    </>
                ) :(
                <>
                  <div className="messages">
                    {messages.map((message) => (
                      <Message key={message._id} message={message} currentUser={username}  />
                    ))}
                    <div ref={messagesEndRef} />
                  </div>
                  <MessageInput username={username} selectedChannel={selectedChannel}/>
                </>
                )
            )
          }        
        </div>
      </div>
    </>
  );
}
