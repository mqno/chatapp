import Head from "next/head";
import { useEffect, useState, useRef } from 'react';
import Pusher from 'pusher-js';
import { Message } from '../components/Message';
import { MessageInput } from '../components/MessageInput';
import { UserNameInput } from '../components/UserNameInput';
import type { ChatMessage } from '../types/chat';


export default function Home() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [username, setUsername] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    const username = localStorage.getItem('registeredAs');
    if (username) {
      setUsername(username);
    }
  }
  , []);
  

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    const pusherKey = process.env.NEXT_PUBLIC_PUSHER_KEY;
    const pusherCluster = process.env.NEXT_PUBLIC_PUSHER_CLUSTER;

    if (!pusherKey || !pusherCluster) {
      console.error('Pusher configuration missing');
      return;
    }

    const pusher = new Pusher(pusherKey, {
      cluster: pusherCluster,
    });

    const channel = pusher.subscribe('chat');
    channel.bind('message', (data: ChatMessage) => {
      setMessages((prev) => [...prev,data]);
    });

    fetchMessages();

    return () => {
      pusher.unsubscribe('chat');
      pusher.disconnect();
    };
  }, []);

  const fetchMessages = async () => {
    const response = await fetch('/api/messages');
    const data = await response.json();
    // Messages from API are already sorted newest first
    setMessages(data);
  };


  
  
  return (
    <>
      <Head>
        <title>Chat App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{ paddingTop:'50px'}}>
      
        <div className="chat-container" >
          {
            !username ? (
              <UserNameInput setUserInfo={(val: string) => setUsername(val)} user={username} />

            ) : (
                <>
                  <div className="messages">
                    {messages.map((message) => (
                      <Message key={message._id} message={message} currentUser={username}  />
                    ))}
                    <div ref={messagesEndRef} />
                  </div>
                  <MessageInput username={username} />
                </>
            )
          }
          
        
        </div>
      </div>
    </>
  );
}
